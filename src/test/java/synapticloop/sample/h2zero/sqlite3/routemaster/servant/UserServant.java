package synapticloop.sample.h2zero.sqlite3.routemaster.servant;

//- - - - thoughtfully generated by synapticloop h2zero - - - - 
//with the use of synapticloop templar templating language
//        (java-create-routemaster-rest-servant.templar)

import java.io.File;
import java.sql.SQLException;

import java.util.List;
import java.sql.Date;
import java.util.Map;

import fi.iki.elonen.NanoHTTPD.IHTTPSession;
import fi.iki.elonen.NanoHTTPD.Response;
import synapticloop.h2zero.base.exception.H2ZeroFinderException;
import synapticloop.h2zero.base.exception.H2ZeroPrimaryKeyException;
import synapticloop.nanohttpd.utils.HttpUtils;
import synapticloop.sample.h2zero.sqlite3.deleter.UserDeleter;
import synapticloop.sample.h2zero.sqlite3.finder.UserFinder;
import synapticloop.sample.h2zero.sqlite3.model.User;
import synapticloop.sample.h2zero.sqlite3.model.util.Constants;

public class UserServant extends BaseServant {

	private static final String APPLICATION_JSON = "application/json";

	public UserServant(String routeContext, List<String> params) {
		super(routeContext, params);
	}

	@Override
	public Response doGet(File rootDir, IHTTPSession httpSession, Map<String, String> restParams, String unmappedParams) {

		if(null != restParams) {
			String primaryKeyString = restParams.get(Constants.USER_ID_USER);
			if(null != primaryKeyString) {
				try {
					Long primaryKey = Long.parseLong(primaryKeyString);
					User user = UserFinder.findByPrimaryKey(primaryKey);
					return(HttpUtils.okResponse(APPLICATION_JSON, user.toJsonString()));
				} catch (NumberFormatException | H2ZeroFinderException ex) {
					return(HttpUtils.internalServerErrorResponse(ex.getMessage()));
				}
			}
		}

		// at this point - there were no parameters, or the parameter was incorrect, so find all

		List<User> findAll;
		try {
			findAll = UserFinder.findAll();
		} catch (SQLException ex) {
			return(HttpUtils.internalServerErrorResponse(ex.getMessage()));
		}
		StringBuilder stringBuilder = new StringBuilder("[");
		boolean first = true;
		for (User user : findAll) {
			if(!first) {
				stringBuilder.append(",");
			}
			stringBuilder.append(user.toJsonString());
			first = false;
		}
		stringBuilder.append("]");
		return(HttpUtils.okResponse(APPLICATION_JSON, stringBuilder.toString()));
	}

	@Override
	public Response doPost(File rootDir, IHTTPSession httpSession, Map<String, String> restParams, String unmappedParams) {
		Map<String, List<String>> parameters = httpSession.getParameters();
		Long primaryKey = null;
		try {
			Long idUserType = castLong(getFirstParameter("idUserType", parameters));
			Boolean flIsAlive = castBoolean(getFirstParameter("flIsAlive", parameters));
			Integer numAge = castInteger(getFirstParameter("numAge", parameters));
			String nmUsername = castString(getFirstParameter("nmUsername", parameters));
			String txtAddressEmail = castString(getFirstParameter("txtAddressEmail", parameters));
			String txtPassword = castString(getFirstParameter("txtPassword", parameters));
			Timestamp dtmSignup = castTimestamp(getFirstParameter("dtmSignup", parameters));
			User user = new User(null, idUserType, flIsAlive, numAge, nmUsername, txtAddressEmail, txtPassword, dtmSignup);

			user.insert();
			primaryKey = user.getPrimaryKey();
		} catch (ServantException ex) {
			return(HttpUtils.badRequestResponse(APPLICATION_JSON, "{\"error\":\"" + ex.getMessage() + "\"}"));
		} catch (H2ZeroPrimaryKeyException ex) {
			return(HttpUtils.badRequestResponse(APPLICATION_JSON, "{\"error\":\"" + ex.getMessage() + "\"}"));
		} catch (SQLException ex) {
			return(HttpUtils.internalServerErrorResponse(APPLICATION_JSON, "{\"error\":\"" + ex.getMessage() + "\"}"));
		}
		return(HttpUtils.okResponse(APPLICATION_JSON, "{\"primaryKey\": " + primaryKey + "}"));
	}

	@Override
	public Response doPut(File rootDir, IHTTPSession httpSession, Map<String, String> restParams, String unmappedParams) {
		return super.doPut(rootDir, httpSession, restParams, unmappedParams);
	}

	@Override
	public Response doDelete(File rootDir, IHTTPSession httpSession, Map<String, String> restParams, String unmappedParams) {
		if(null != restParams) {
			String primaryKeyString = restParams.get(Constants.USER_ID_USER);
			if(null != primaryKeyString) {
				try {
					Long primaryKey = Long.parseLong(primaryKeyString);
					int numDeleted = UserDeleter.deleteByPrimaryKey(primaryKey);
					if(1 != numDeleted) {
						return(HttpUtils.notFoundResponse(APPLICATION_JSON, "{\"error\":\"primary key of '" +  primaryKeyString + "' not found.\"}"));
					}
					return(HttpUtils.okResponse());
				} catch (NumberFormatException | SQLException ex) {
					return(HttpUtils.internalServerErrorResponse(ex.getMessage()));
				}
			}
		}
		return(HttpUtils.forbiddenResponse());
	}

}
