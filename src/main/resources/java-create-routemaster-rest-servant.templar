package {database.package}.routemaster.servant;{\n}
{\n}
//- - - - thoughtfully generated by synapticloop h2zero - - - - {\n}
//with the use of synapticloop templar templating language{\n}
//        (java-create-routemaster-rest-servant.templar){\n}
{\n}
import java.io.File;{\n}
import java.sql.SQLException;{\n}
{\n}
import java.util.List;{\n}
import java.sql.Date;{\n}
import java.util.Map;{\n}
{\n}
import fi.iki.elonen.NanoHTTPD.IHTTPSession;{\n}
import fi.iki.elonen.NanoHTTPD.Response;{\n}
import synapticloop.h2zero.base.exception.H2ZeroFinderException;{\n}
import synapticloop.h2zero.base.exception.H2ZeroPrimaryKeyException;{\n}
import synapticloop.nanohttpd.utils.HttpUtils;{\n}
{if !table.isConstant}
	import synapticloop.sample.h2zero.{options.database}.deleter.{table.javaClassName}Deleter;{\n}
{endif}
import synapticloop.sample.h2zero.{options.database}.finder.{table.javaClassName}Finder;{\n}
import synapticloop.sample.h2zero.{options.database}.model.{table.javaClassName};{\n}
import synapticloop.sample.h2zero.{options.database}.model.util.Constants;{\n}
{\n}
public class {table.javaClassName}Servant extends BaseServant {{{\n}
{\n}
{\t}private static final String APPLICATION_JSON = "application/json";{\n}
{\n}
{\t}public {table.javaClassName}Servant(String routeContext, List<String> params) {{{\n}
{\t}{\t}super(routeContext, params);{\n}
{\t}}{\n}
{\n}
{\t}@Override{\n}
{\t}public Response doGet(File rootDir, IHTTPSession httpSession, Map<String, String> restParams, String unmappedParams) {{{\n}
{\n}
{\t}{\t}if(null != restParams) {{{\n}
{\t}{\t}{\t}String primaryKeyString = restParams.get(Constants.{table.upperName}_{table.primaryKey.upperName});{\n}
{\t}{\t}{\t}if(null != primaryKeyString) {{{\n}
{\t}{\t}{\t}{\t}try {{{\n}
{\t}{\t}{\t}{\t}{\t}Long primaryKey = Long.parseLong(primaryKeyString);{\n}
{\t}{\t}{\t}{\t}{\t}{table.javaClassName} {table.javaFieldName} = {table.javaClassName}Finder.findByPrimaryKey(primaryKey);{\n}
{\t}{\t}{\t}{\t}{\t}return(HttpUtils.okResponse(APPLICATION_JSON, {table.javaFieldName}.toJsonString()));{\n}
{\t}{\t}{\t}{\t}} catch (NumberFormatException | H2ZeroFinderException ex) {{{\n}
{\t}{\t}{\t}{\t}{\t}return(HttpUtils.internalServerErrorResponse(ex.getMessage()));{\n}
{\t}{\t}{\t}{\t}}{\n}
{\t}{\t}{\t}}{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}// at this point - there were no parameters, or the parameter was incorrect, so find all{\n}
{\n}
{\t}{\t}List<{table.javaClassName}> findAll;{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}findAll = {table.javaClassName}Finder.findAll();{\n}
{\t}{\t}} catch (SQLException ex) {{{\n}
{\t}{\t}{\t}return(HttpUtils.internalServerErrorResponse(ex.getMessage()));{\n}
{\t}{\t}}{\n}
{\t}{\t}StringBuilder stringBuilder = new StringBuilder("[");{\n}
{\t}{\t}boolean first = true;{\n}
{\t}{\t}for ({table.javaClassName} {table.javaFieldName} : findAll) {{{\n}
{\t}{\t}{\t}if(!first) {{{\n}
{\t}{\t}{\t}{\t}stringBuilder.append(",");{\n}
{\t}{\t}{\t}}{\n}
{\t}{\t}{\t}stringBuilder.append({table.javaFieldName}.toJsonString());{\n}
{\t}{\t}{\t}first = false;{\n}
{\t}{\t}}{\n}
{\t}{\t}stringBuilder.append("]");{\n}
{\t}{\t}return(HttpUtils.okResponse(APPLICATION_JSON, stringBuilder.toString()));{\n}
{\t}}{\n}
{\n}
{\t}@Override{\n}
{\t}public Response doPost(File rootDir, IHTTPSession httpSession, Map<String, String> restParams, String unmappedParams) {{{\n}
{if table.isConstant}
	{\t}{\t}// This is a constant table and cannot be altered{\n}
	{\t}{\t}return(HttpUtils.forbiddenResponse());{\n}
{else}
	{\t}{\t}Map<String, List<String>> parameters = httpSession.getParameters();{\n}

	{\t}{\t}Long primaryKey = null;{\n}
	{\t}{\t}try {{{\n}
	{loop table.fields as field}
		{if !field.primary}
			{\t}{\t}{\t}{field.javaType} {field.javaName} = cast{field.javaType}(getFirstParameter("{field.javaName}", parameters));{\n}
		{endif}
	{endloop}
	{\t}{\t}{\t}{table.javaClassName} {table.javaFieldName} = new {table.javaClassName}(null
		{loop table.fields as field}
			{if !field.primary}
				, {field.javaName}
			{endif}
		{endloop});{\n}
	{\n}
	{\t}{\t}{\t}{table.javaFieldName}.insert();{\n}
	{\t}{\t}{\t}primaryKey = {table.javaFieldName}.getPrimaryKey();{\n}
	{\t}{\t}} catch (ServantException ex) {{{\n}
	{\t}{\t}{\t}return(HttpUtils.badRequestResponse(APPLICATION_JSON, "{{\"error\":\"" + ex.getMessage() + "\"}"));{\n}
	{\t}{\t}} catch (H2ZeroPrimaryKeyException ex) {{{\n}
	{\t}{\t}{\t}return(HttpUtils.badRequestResponse(APPLICATION_JSON, "{{\"error\":\"" + ex.getMessage() + "\"}"));{\n}
	{\t}{\t}} catch (SQLException ex) {{{\n}
	{\t}{\t}{\t}return(HttpUtils.internalServerErrorResponse(APPLICATION_JSON, "{{\"error\":\"" + ex.getMessage() + "\"}"));{\n}
	{\t}{\t}}{\n}
	{\t}{\t}return(HttpUtils.okResponse(APPLICATION_JSON, "{{\"primaryKey\": " + primaryKey + "}"));{\n}
{endif}


{\t}}{\n}
{\n}
{\t}@Override{\n}
{\t}public Response doPut(File rootDir, IHTTPSession httpSession, Map<String, String> restParams, String unmappedParams) {{{\n}
{if table.isConstant}
	{\t}{\t}// This is a constant table and cannot be altered{\n}
	{\t}{\t}return(HttpUtils.forbiddenResponse());{\n}
{else}
	{\t}{\t}return super.doPut(rootDir, httpSession, restParams, unmappedParams);{\n}
{endif}
{\t}}{\n}
{\n}
{\t}@Override{\n}
{\t}public Response doDelete(File rootDir, IHTTPSession httpSession, Map<String, String> restParams, String unmappedParams) {{{\n}
{if table.isConstant}
	{\t}{\t}// This is a constant table and cannot be altered{\n}
	{\t}{\t}return(HttpUtils.forbiddenResponse());{\n}
{else}
	{\t}{\t}if(null != restParams) {{{\n}
	{\t}{\t}{\t}String primaryKeyString = restParams.get(Constants.{table.upperName}_{table.primaryKey.upperName});{\n}
	{\t}{\t}{\t}if(null != primaryKeyString) {{{\n}
	{\t}{\t}{\t}{\t}try {{{\n}
	{\t}{\t}{\t}{\t}{\t}Long primaryKey = Long.parseLong(primaryKeyString);{\n}
	{\t}{\t}{\t}{\t}{\t}int numDeleted = {table.javaClassName}Deleter.deleteByPrimaryKey(primaryKey);{\n}
	{\t}{\t}{\t}{\t}{\t}if(1 != numDeleted) {{{\n}
	{\t}{\t}{\t}{\t}{\t}{\t}return(HttpUtils.notFoundResponse(APPLICATION_JSON, "{{\"error\":\"primary key of '" +  primaryKeyString + "' not found.\"}"));{\n}
	{\t}{\t}{\t}{\t}{\t}}{\n}
	{\t}{\t}{\t}{\t}{\t}return(HttpUtils.okResponse());{\n}
	{\t}{\t}{\t}{\t}} catch (NumberFormatException | SQLException ex) {{{\n}
	{\t}{\t}{\t}{\t}{\t}return(HttpUtils.internalServerErrorResponse(ex.getMessage()));{\n}
	{\t}{\t}{\t}{\t}}{\n}
	{\t}{\t}{\t}}{\n}
	{\t}{\t}}{\n}
	{\t}{\t}return(HttpUtils.forbiddenResponse());{\n}
{endif}
{\t}}{\n}
{\n}
}{\n}