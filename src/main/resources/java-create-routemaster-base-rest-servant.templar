package {database.package}.routemaster.servant;{\n}
{\n}
//- - - - thoughtfully generated by synapticloop h2zero - - - - {\n}
//with the use of synapticloop templar templating language{\n}
//  (java-create-routemaster-base-rest-servant.templar){\n}
{\n}
import java.sql.Date;{\n}
import java.sql.Timestamp;{\n}
import java.text.ParseException;{\n}
import java.text.SimpleDateFormat;{\n}
{\n}
import java.util.List;{\n}
import java.util.Map;{\n}
import org.json.JSONObject;{\n}
{\n}
import synapticloop.nanohttpd.router.RestRoutable;{\n}
{\n}
public abstract class BaseServant extends RestRoutable {{{\n}
{\t}public class ServantException extends Exception {{{\n}
{\t}{\t}private static final long serialVersionUID = 2662011709175803257L;{\n}
{\n}
{\t}{\t}/**{\n}
{\t}{\t} * This is an internal exception for indicating that there should be an {\n}
{\t}{\t} * error response{\n}
{\t}{\t} * {\n}
{\t}{\t} * @param message The message to give back to the user{\n}
{\t}{\t} */{\n}
{\t}{\t}public ServantException(String message) {{{\n}
{\t}{\t}{\t}super(message);{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}
{\t}private static final SimpleDateFormat SIMPLE_DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd");{\n}
{\n}
{\t}/**{\n}
{\t} * Instantiate a base servant{\n}
{\t} * {\n}
{\t} * @param routeContext The route contexts{\n}
{\t} * @param params The list of params to map to{\n}
{\t} */{\n}
{\t}public BaseServant(String routeContext, List<String> params) {{{\n}
{\t}{\t}super(routeContext, params);{\n}
{\t}}{\n}
{\n}
{\t}/**{\n}
{\t} * Get the first parameter out of the list of parameters{\n}
{\t} * {\n}
{\t} * @param name The parameter name to look up{\n}
{\t} * @param parameters The map of the parameters for that name{\n}
{\t} * {\n}
{\t} * @return The first parameter (or null if it does not exist({\n}
{\t} */{\n}
{\t}protected String getFirstParameter(String name, Map<String, List<String>> parameters) {{{\n}
{\t}{\t}List<String> list = parameters.get(name);{\n}
{\t}{\t}if(null == list || list.size() == 0) {{{\n}
{\t}{\t}{\t}return(null);{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}return(list.get(0));{\n}
{\t}}{\n}
{\n}
{\t}protected String getErrorObjectAsString(String message) {{{\n}
{\t}{\t}JSONObject jsonObject = new JSONObject();{\n}
{\t}{\t}jsonObject.put("error", message);{\n}
{\t}{\t}return(jsonObject.toString());{\n}
{\t}}{\n}
{\n}
{\t}protected Date castDate(String value) throws ServantException {{{\n}
{\t}{\t}if(null == value) {{{\n}
{\t}{\t}{\t}return(null);{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}java.util.Date parsed = null;{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}parsed = SIMPLE_DATE_FORMAT.parse(value);{\n}
{\t}{\t}} catch (ParseException ex) {{{\n}
{\t}{\t}{\t}throw new ServantException(ex.getMessage());{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}if(null == parsed) {{{\n}
{\t}{\t}{\t}return(null);{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}return(new Date(parsed.getTime()));{\n}
{\t}}{\n}
{\n}
{\t}protected String castString(String value) throws ServantException {{{\n}
{\t}{\t}return(value);{\n}
{\t}}{\n}
{\n}
{\t}protected Integer castInteger(String value) throws ServantException {{{\n}
{\t}{\t}if(null == value) {{{\n}
{\t}{\t}{\t}return(null);{\n}
{\t}{\t}}{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}return(Integer.valueOf(value));{\n}
{\t}{\t}} catch(NumberFormatException ex) {{{\n}
{\t}{\t}{\t}throw new ServantException(ex.getMessage());{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}
{\t}protected Boolean castBoolean(String value) throws ServantException {{{\n}
{\t}{\t}if(null == value) {{{\n}
{\t}{\t}{\t}return(null);{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}return(Boolean.valueOf(value));{\n}
{\t}}{\n}
{\n}
{\t}protected Timestamp castTimestamp(String value) throws ServantException {{{\n}
{\t}{\t}if(null == value) {{{\n}
{\t}{\t}{\t}return(null);{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}return(Timestamp.valueOf(value));{\n}
{\t}{\t}} catch(IllegalArgumentException ex) {{{\n}
{\t}{\t}{\t}throw new ServantException(ex.getMessage());{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}
{\t}protected Long castLong(String value) throws ServantException {{{\n}
{\t}{\t}if(null == value) {{{\n}
{\t}{\t}{\t}return(null);{\n}
{\t}{\t}}{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}return(Long.valueOf(value));{\n}
{\t}{\t}} catch(NumberFormatException ex) {{{\n}
{\t}{\t}{\t}throw new ServantException(ex.getMessage());{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}
{\t}protected Float castFloat(String value) throws ServantException {{{\n}
{\t}{\t}if(null == value) {{{\n}
{\t}{\t}{\t}return(null);{\n}
{\t}{\t}}{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}return(Float.valueOf(value));{\n}
{\t}{\t}} catch(NumberFormatException ex) {{{\n}
{\t}{\t}{\t}throw new ServantException(ex.getMessage());{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}
}